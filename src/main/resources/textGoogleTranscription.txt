In this video we going to discuss software-defined networking sdn and OpenFlow. Now one of the hardest things to understand with s d n. O software-defined networking is the various definitions of sdn, the gentleman who seen as the father of East End of software-defined networking. What Sauced what is ACN and he said well, he's not sure anymore because it's definition has changed. It's kind of like an umbrella term for various ways to use software to manage and manipulate networks for this discussion. I'm going to explain three main. Reviews of software-defined networking the first definition is open. Sdn. Typically using a protocol cold OpenFlow. The second definition is sdn via. Apis application programming interfaces and the food way or so definition of sdn is sdn of Vaya overlays. The open networking Foundation which is the organization in charge of the OpenFlow protocol and OpenFlow standard Define tasty in as the separation of the control plane and data plane where the networking devices all control or updated using the open flood protocol. That is one definition of SDM. Cisco's an example likes to use the SD in Via API model wear functionality on networking devices is exposed using a rich application programming interface. API developers can manipulate network devices using a richer API, then was possible using for instance the CLI and SNMP to Netflix can be programmed using a richer or extended application programming interface VMware. Use sdny overlays wait, for example vxlan tunnels are used across a network infrastructure for the ATP course. We going to concentrate on the open sdn model using OpenFlow, but I will explain the other visions of St. And briefly In a traditional environment way, for example, a company has three switches three routers. Each device has a local control plane and local data plan. Now the control plane is essentially the brain of the device. A device with a local control plane has for example a local a routing table or local rip routing information base particles, like ospf all configured on these devices to update the routing table. Open shortest path first ospf is a distributed routing protocol that is run on each device and exchanges routes between the devices to allow them to work out what the topology of the network looks like ospf is a complicated distributed routing protocol in a traditional environment the control plane runs locally on each device. In other words. Each device has a local brain Advocates of sdn will say that this is a complex way to work out to the topology of the network. There is no single device that has visibility of the entire network each device as to work out independently what the network looks like and together they synchronize a link State database, which is the state of the topology at a given point in time. If you have multiple network devices from a management point of view using the CLI or command line interface, you would have to connect to each device and individually and typically manually configure that networking device. Each device also has a local data plan. The date of plane is Hot Pockets of forwarded through the device. If you had three switches, each switch has a local control plane the local control planes the local brain once again. Each device also has a local the data plane. This is used for forwarding of the traffic. The how is the traffic forwarded through the device some other ways traffic around some pulled one. It needs to be forwarded out of tea. And that information is programmed using the control plane in a riding information bases an example or a MAC address table where the device of loom bands with Mac addresses on the topology that information can then be pushed into hard way into the data plan. So the control plane is typically running software the date of plane is a copy of the routing table as an example running hard way to allow for high throughput folding of traffic from one point to another From a management point of view each device has its own management playing in other words, you need to configure each device individually if you had a hundred switches or a hundred route is you would have a hundred control planes or hundreds Shepherd brains. You would have a hundred data planes and you have a hundred Management in two faces to manage those devices you would need to town. It will connect to the CLI of each of those hundred devices to configure ospf how to configure spanning tree as an example. Another problem that limits automation of networking devices is the fact that every device has its own proprietary operating system and own proprietary interfaces. If this device was an HP Conway switch and this device was an HP provision switch and this device was a Cisco switch and you had some other devices from juniper and other networking vendors. It's very difficult to create an application or the new rotting particle that is installed and every one of those devices example, if I developed a new routing protocol David's dodgy routing protocol ddrp, which I think is a very good routing protocol. It would be very difficult for me to get a vendor's such as HP Cisco Juniper and others to run this new routing protocol that I've developed. There is no opening to face on these devices that allow me to change the control plane and hence the data plan of the switches icon to develop a new routing protocol and just install it on these. Switches the operating system on these switches is proprietary. I have no access to the operating system icon change the operating system to install a new routing protocol icon change the API show interfaces on these devices because its proprietary so Advocates of a sea and an open Flow will say that this limits Innovation, it would make much more sense to open up the networking devices to allow other people to develop applications protocols and utilities that allow for Rapid development and innovation in networking. On the other hand, when you look at server Technologies and server development. There has been rapid innovation in the last 10 years networking has been stagnant. We still configure ospf in the same way today as we did 10 years ago, but if you think about PCS will service, I as an application developer could write an application any application something like Microsoft Word or a game was some kind of application that specific to a business requirements. I would write that application for an operating system such as Windows or Linux. Will some type of os operating system abstracts the physical hard way from me as an application developer if I was running an application and installing it on an HP laptop or a Dell laptop virtual machine running in VMware or in virtualbox many other types of physical implementations is an application developer do not need to be aware of the network interface cards used on these physical machine virtual machines. I am literally write an application to an API for the operating system and the operating system hides the complexities of the network interface card the memory. And other physical characteristics of the hard way, why is the application developer unaware of the physical server that my application is installed on the rapid development of VMware and other virtualization technologies have allowed the industry to extend this where the operating system doesn't even know which Hardware it's physically installed on you can rapidly move a virtual machine from one Hardware platform to another so in other words, I could create a virtual machine on my laptop which may be an HP laptop. Could you could install that on an Apple Mac running within avian way virtualized environment that is because of abstraction of the hard way from the application that doesn't exist in networking today. However, So when I survey environment, I could create an application to an abstraction layer. Operating system such as Windows Windows hides the complexity of the hard way that the application is installed on from me as the application developer. I don't have to be concerned about the physical hard way that my application is installed on I can write my application in a high-level programming language such as pie iPhone or Visual Basic. I am unaware of and don't need to be concerned about the physical Hardware that the application is run on that is not possible today in networking. I cannot create an application that's installed on networking devices because this is proprietary. I have no access to the vendor operating system code to make changes. So with open sdn and OpenFlow the idea is to create an opening to face. On networking devices and create an abstraction layer to allow for Rapid application development. So the situation changes to the following. So what we introduce is a controller. Abstraction layer the controller talks to the networking devices using an open standard protocol in this case open Flow open Flow provides an open API open interface to networking devices the idea. Where is it doesn't matter which operating system or vendor the networking devices using there is an opening to face to managing the flow table of that device. This is known as the southbound ATI on the Northbound API. We have two interfaces one using the restful API and the other one using the Java API. These are two interfaces that allows an application developer to manipulate flow tables and flu entries on networking devices without communicating directly to those networking devices. The application developer is extracted from the hard way and doesn't need to be aware of the details and requirements of physical Asics on switches and networking devices. The application developer just like in Windows uses a high-level API, in this case of rest or Java API to communicate to the controller and the controller takes care of the nitty-gritty or complicated details of updating flow tables on switches. So previously we had three switches each with a local control plane and local data plan in an open Flow sdn environment. We have my controller and in its purest form. The brain of the networking device is moved to the controller. So rather than the networking devices each having their own brain. There is now a central brain in control of the networking devices. This provides a centralized device for centralized control centralized policies and easy and management as an analogy and it's only an analogy in a wireless environment previously. We had a ton of us access points. He might have had a hundred of tournaments access points these days we have lightweight or controlled access points where a hundred access points are controlled by Central Crayola rather than each access point having its own local brain. It's much easier to manage a hundred access points using a centralized controller. Then it is to manually create policies on a hundred individual access points that's similar to the idea. Here. We we have a centralized controller that is pushing policies or configuration changes down to networking devices. It allows an application program at to create an application that can manipulate the flow of traffic on the network. So I could create an application that sends a command through the rest API to the controller. Which then updates the switches using OpenFlow that now says that traffic arriving with a Mac address of a going to MAC address of be should flow through the network along this path. Now, they have some optional videos that I've added to this training. We're actually show you a application in this case is very simple application of bash script updating the flow tables of the switches and manipulating the flows of traffic in the network that can be extended to fall more complicated applications and I'll talk about some examples in the moment but to summarize in open Sdn. Sdn, using OpenFlow the networking devices no longer have a local brain. So in its purest form Superior open sdn, the brain is removed from the networking devices and he's put into a centralized controller the switches use what is cold a flow table that contains flow increase flow in trees are dated by the controller at the controller is an actual fact just a kanji which one abstraction layer that allows application developers to manipulate the flows in the network. The power of sdn OpenFlow comes into play with applications. You are I could write an application that sends commands to the controller which in turn uses OpenFlow to update the flow tables off the switches which in turn manipulates the flow of traffic in the network environment that's very difficult to do in a traditional networking. environment I just to reiterate terminology and then I'm going to talk about an example application at HP of developed. We have an application. It's uses the Northbound API to communicate to an update information on the controller. The controller uses the southbound API to update of the flow tables of networking devices. Typically we talk about switches. But these in the greater vision of things could be routers load balances by wolves and other devices Northbound. API typically uses a restful API or a Java API to allow changes to the networking environment on the southbound API in a pure open Flow environment. We use the OpenFlow protocol to update the flow tables of switches now in other environments such as Using HDMI apis different protocols could be used on the southbound API. So something like Nick cunt OpenFlow SNMP other particles could be used to change the configuration and update the flow tables of switches open Flow does not update to the configuration of devices that other words. It doesn't do things like configure ospf will configure usernames on the switch. It updates the flow tables of the switches to manipulate how traffic flows through the networking environment. There is a protocol that would allow you to change the configuration, but that's not widely supported. So a lot of vendors are not using SNMP netconf and other particles for updating the configuration off of the networking devices. This this call the application layer. This is cool to control and this is cool. The infrastructure layer is application layer is where you have to occasionally side that use the Northbound API to talk to the control layer, which in turn uses the southbound API to communicate to the infrastructure benisti an environment. So application so in the application layer use the Northbound API to talk to the controller which in turn uses the southbound API to communicate to networking devices application layer. Controlla infrastructure layer Northbound 85 Southbound API. We also have East-West traffic and all that means is you have multiple controllers and they communicate with one another so southbound is controller down to infrastructure when networking devices Northbound is between the applications on the controller East-West is between controllers in the controller. One of the applications at HP of developed is the HP network protector and you may see it referenced as Sentinel. Sentinel was a old name for HP network protector know what this application does. Is it essentially intercepts DNS queries and then checks those DNS queries against a Tipping Point of database to ensure that uses all not going to bad websites or malicious websites and dust implementation uses OpenFlow. So the way it works is the network protector application is installed on the controller and uses the java-based API for communication to the controller the application also references. A copy of the Tipping Point database which contains over a million website entries allowing the application to leverage this database of malicious or bad websites. The controller uses OpenFlow to update the switches to intercept DNS queries. So if a PC is in the network and sends a DNS request for a bad website such as pirates must die. Com that is a bad malicious website. So the DNS query for pirates. Mustard i.com arrives at the switch this application using the Java API to the controller has already pre-programmed affluent tree that says when the switch receives a DNS query send it to the controller. So when the PC says the DNS query for Paris mostarda come that Dennis. Sent to the controller which in turn sends it to the network protector application the metric protector application Chicks The Tipping Point in database to see if this is a malicious website. And in this case, it is a malicious website. So that is returned back to the application saying bad or malicious website the application then sends a message back on to the network to inform the PC. Just remain doesn't exist. So essentially the PC believe it is received. A response from a DNS server saying non-existent to Maine but an actual fact what's happened is the DNS query has been intercepted and checked against the database. And in this case because it's a bad website then it could protect the application has fabricated a DNS response. Send it back to the PC saying non existing domain the PC. They photos not attempt a connection to this Domaine because it doesn't exist Quest arrive for a good website. It says hp.com that get sent to the controller the controller and $0.10 it to the application the application Chicks The Tipping Point database and sees that hp.com is not a bad website. So what happens is the DNS response is simply sent back to the network and he's forwarded to a DNS server for normal resolution for the DNS server on the network received the Quest and forward back a reply and the traffic proceeds normally in this case. We are using something called hybrid processing way. The switch has its own local brain and is not a totally dumb device or pure OpenFlow switch in this example a specific fluent reprogrammed on the switch to intercept DNS queries. The switch isn't made a pure OpenFlow switch or a dumb switch for lack of a better term. Another time you may come across these openstack. So what is openstack it's a collection of Open Source software projects that enterprises and service providers. Can you use to set up and run the cloud compute and storage infrastructure? This was originally set up by Rex space and Nessa, but the foundation has attracted many members including HP Cisco and others on the openstack website openstax.org is a quick overview of what openstack is who's behind it who uses openstack and why open source matters? Please refer to the openstack. Org website for more information about openstack for the school sweet just briefly mentioning the term so that you are aware of what openstack is in brief. It provides an open framework for interacting with pools of computer networking and storage resources and provisioning these on demand corporations service providers researches and global data centers implementing openstack today to deploy a large-scale cloud appointments for both private and public clouds. For more information about OpenFlow, please visit the open networking Foundation website founded open networking. Org under St. And resources you can find out about OpenFlow. and view the open float switch specification weather is great detail explaining. As an example that a controller uses the OpenFlow protocol to communicate with a OpenFlow switch and OpenFlow switch has an open for channel for communication to the controller. It contains one or more flow tables, which can be updated to manipulate the flow of traffic through the network in the demonstration videos that are part of the schools. I show you practical examples of this taking place where OpenFlow rules are programmed to match certain types of traffic and then take an action such as for the traffic out of a sudden Port as well as keep counters or statistics of the number of packets that have matched a Floetry in the float table.